df_out$var14
df_out %>%
select(var14, everything())
df_out %>%
dplyr::select(var14, everything())
df =df_out %>%
dplyr::select(var14, everything())
View(df)
rfeResults = rfe(x = df_out[c(-2, -3)], y = df_out$intervention,
sizes = sizes,
rfeControl = ctrl)
rfeResults = rfe(x = df[c(-2, -3)], y = df$intervention,
sizes = sizes,
rfeControl = ctrl)
rfeResults
plot(rfeResults, type=c("g", "o"))
View(x)
runif(26, 0, 3)
x = runif(26, 0, 3)
View(x)
x = runif(26, 0, 0.10)
View(x)
x = runif(26, -1, 1)
View(x)
#knitr::opts_chunk$set(echo = TRUE)
if(!require(pacman)) {
install.packages("pacman")
library(pacman)
}
pacman::p_load(reticulate, R.matlab, sessioninfo) #reticulate for python and R.matlab for... Matlab
use_virtualenv(virtualenv = "r-reticulate")
homepath = getwd()
data <- read_csv("data/data.csv") # or
data <- read_csv(paste(homepath, "data/data.csv", sep="/"))
if(!require(pacman)) {
install.packages("pacman")
install.packages("devtools")
library(pacman)
}
pacman::p_load(tidyverse, ggthemes, corrplot, moments, afex, viridis, Rmisc, glmnet, caret) #moments -> skewness #afex -> lmer #viridis -> color palette # Rmisc -> summarySEwithin
devtools::source_gist("2a1bb0133ff568cbe28d", filename = "geom_flat_violin.R") # to download small scripts (AKA "gists")
data$intervention = as.factor(data$intervention)
data$id = as.factor(data$id)
nums1 <- unlist(lapply(data, is.numeric)) #find numeric variables
df_plot = data %>% pivot_longer(
cols = names(data[ , nums1]),
names_to = c("var", "session"),
names_pattern = "var(.*)_(.*)",
values_to = "measure"
)
df_plot$session = as.factor(df_plot$session)
df_plot$var = ordered(as.numeric(df_plot$var)) #order for neat plots
df = df_plot %>% pivot_wider(names_from = var, values_from = measure)
nums <- unlist(lapply(df, is.numeric)) #find numeric variables
#plot densities
dens_plot = ggplot(df_plot)+
geom_density(aes( x=measure))+
facet_wrap(~var, scales = "free")+
labs(title = "Density per variable")+
theme(axis.title = element_text()) +
ylab("Density") + xlab('Value'); dens_plot
#pairs(~., data = df[ , nums], main = "Scatterplot Matrix of variables") #default solution
corrplot::corrplot(cor(df[ , nums], use="pairwise.complete.obs"), type="lower") #using corrplot
#box plot
box_plot = ggplot(df_plot)+
geom_boxplot(aes(x=intervention, y=measure))+
scale_x_discrete(labels=c("Placebo", "Control")) +
facet_wrap(~var, scales = "free")+
labs(title = "Boxplot by group")+
ggthemes::theme_fivethirtyeight()+
theme(axis.title = element_text()) +
ylab("predictors") + xlab(''); box_plot
df_scaled = df; df_scaled[nums] <- lapply(df_scaled[nums], scale) #standardize
pivot_re <- function(data, nums) {x = data %>% pivot_longer(
cols = names(data[ , nums]),
names_to = "var",
values_to = "measure")
x$var = ordered(as.numeric(x$var)) #order for neat plots
return(x)} # #create this function because we gonna need it
df_scaled_plot = pivot_re(df_scaled, nums)
df_scaled_plot$var = ordered(as.numeric(df_scaled_plot$var)) #order for neat plots
# we use %+% to change the dataset of a ggplot object!
box_plot_scaled = box_plot %+% df_scaled_plot +   labs(title = "Boxplot by group (standardized)")+  ylab("standardized predictors") ; box_plot_scaled
#if you ever want/need to remove outlier based uniquely on the sd here is a little helper
remove_out <- function(dataraw, datasd, sd, nums){
df_dict <- data.frame(variable = names(datasd[nums]), out_low = rep(-sd,length(names(datasd[nums]))),  out_high = rep(sd,length(names(datasd[nums]))))
for (var in df_dict$variable) {
dataraw[[var]] [datasd[[var]] < df_dict[df_dict$variable == var, ]$out_low | datasd[[var]] > df_dict[df_dict$variable == var, ]$out_high] <- NaN}
return(dataraw)
}
#for example
#df_out = remove_out(df,df_scaled, 3, nums)
# create list of variable names
col_names = 1:14%>% str_c("var", .); diff_names = as.character(1:14)
#function to create difference scores
diff_column <- function(data, col_names) {
i = 0
for (col in col_names) {
i = i+1
data[,str_c(i)] = data[,str_c(col, "_ses2")] - data[,str_c(col, "_ses1")]}
return(data)
}
df_diff = diff_column(data, col_names)
df_diff = df_diff[c("id", "intervention",diff_names)] # keep only columns of interest
df_diff[diff_names] = scale(df_diff[diff_names]) #scale
df_out = remove_out(df_diff,df_diff, 5, diff_names)
df_out[diff_names] = scale(df_out[diff_names], scale = F ) #center at 0
df_out = na.omit(df_out)
df_diff_plot <- pivot_re(df_out, diff_names)
#box plot
box_plot_diff= box_plot %+% df_diff_plot +   labs(title = "Boxplot by group (diff score Z)")+  ylab("standardized diff scores") ; box_plot_diff
#dens plot
dens_plot_diff= dens_plot %+% df_diff_plot + geom_density(aes(x=measure, fill = intervention)) + xlab("standardized diff scores") ; dens_plot_diff
lapply(na.omit(df[diff_names]), moments::skewness) #check
df_sqrt = df; df_sqrt[diff_names] <- lapply(df_sqrt[diff_names], sqrt); df_sqrt_plot = pivot_re(df_sqrt, diff_names) #create sqrt df
df_log = df; df_log[diff_names] <- lapply(df_log[diff_names], log); df_log_plot = pivot_re(df_log, diff_names) #create log df
df_log1p = df; df_log1p[diff_names] <- lapply(df_log1p[diff_names], log1p); df_log1p_plot = pivot_re(df_log1p, diff_names) #create log1p df
#Square root (handles non negative data and zeroes)
dens_sqrt_plot = dens_plot_diff %+% df_sqrt_plot + labs(title = "Density per variable (square root transformed)"); dens_sqrt_plot
lapply(na.omit(df_sqrt[diff_names]), moments::skewness) # calculate skewness of the data
#Log (handles non negative data and but NOT zeroes)
dens_log_plot = dens_plot_diff %+% df_log_plot + labs(title = "Density per variable (log transformed)"); dens_log_plot
lapply(na.omit(df_log[diff_names]), moments::skewness) # here we see NA apparearing, why ? because we introduced -inf ( log(0) = -inf ) !
#Log1p (handles non negative data AND  zeroes)
dens_log1p_plot = dens_plot_diff %+% df_log1p_plot + labs(title = "Density per variable (log + 1 transformed)"); dens_log1p_plot
lapply(na.omit(df_log1p[diff_names]), moments::skewness) # here we see NO NA apparearing, why ? because ( log(0+1) = 0 ) !
#zero-inflated -> BAD
## Create a formula for a model with a large number of variables:
fmla <- as.formula(paste(" `1` ~ intervention + ", paste0(sprintf("`%s`",  diff_names[c(-1,-2)]), collapse= "+"), " + Error(id)"))
#this really just to demonstrate the influence of outliers
#with huge outliers
model1 = aov_car(fmla, data= na.omit(df_diff), factorize = F, anova_table = list(correction = "GG", es = "pes"))
nice(model1, MSE=F); emmeans::ref_grid(model1) #triple check everything is centered at 0
#without huge outliers
model = aov_car(fmla, data= na.omit(df_out), factorize = F, anova_table = list(correction = "GG", es = "pes"))
nice(model, MSE=F); emmeans::ref_grid(model) #triple check everything is centered at 0
#this is just stuff to make the formating nice
averaged_theme <- theme_bw(base_size = 32, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 32, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position=c(.9,.9),
legend.title  = element_text(size = 12),
legend.text  = element_text(size = 10),
legend.key.size = unit(0.2, "cm"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
panel.grid.major.x = element_blank() ,
panel.grid.major.y = element_line(size=.2, color="lightgrey") ,
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
pal = viridis::viridis(n=3) # specialy conceived for colorblindness
# AVERAGED EFFECT
dfH <- summarySEwithin(df,
measurevar = "1",
betweenvars = "intervention",
withinvars = "session",
idvar = "id", na.rm = T)
dfH$cond <- ifelse(dfH$session == "ses1", -0.25, 0.25)
df$cond <- ifelse(df$session == "ses1", -0.25, 0.25)
set.seed(666); df <- df %>% mutate(condjit = jitter(as.numeric(cond), 0.3),
grouping = interaction(id, cond))
labels = c("0"="Placebo", "1"="Treatment")
plt <- ggplot(df, aes(x = cond, y = `1`, fill = session, color = session)) +
geom_point(data = dfH, alpha = 0.5) +
geom_line(aes(x = condjit, group = id, y = `1`), alpha = .3, size = 0.5, color = 'gray') +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .2, aes(fill = session, color = NA))+
geom_point(aes(x = condjit), alpha = .3,) +
geom_crossbar(data = dfH, aes(y = `1`, ymin=`1`-ci, ymax=`1`+ci,), width = 0.2 , alpha = 0.1)+
ylab('Var 1') +
xlab('') +
#scale_y_continuous(expand = c(0, 0), breaks = c(seq.int(0,100, by = 20)), limits = c(-0.5,100.5)) + # choose limits
scale_x_continuous(labels=c("Pre", "Post"),breaks = c(-.25,.25), limits = c(-.5,.5)) +
scale_fill_manual(values=c("ses1"= pal[1], "ses2"=pal[2]), guide = 'none') +
scale_color_manual(values=c("ses1"=pal[1], "ses2"=pal[2]), guide = 'none') +
theme_bw() + facet_wrap(~intervention, labeller=labeller(intervention =labels)) + averaged_theme ; plt
#if you want to save the figures
pdf('figures/inter.pdf')
print(plt)
dev.off()
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
sizes = seq(sqrt(ncol(df_out[-1]))*.5, ncol(df_out[-1]), by = 5)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
rfeResults = rfe(x = df_out[c(-1, -2)], y = df_out$intervention, sizes=sizes, rfeControl=control)
rfeResults
predictors(rfeResults)
plot(rfeResults, type=c("g", "o"))
mat<-model.matrix(intervention~.,data=df_out[-1]); mat=mat[,-1] # remove intercept
cv=cv.glmnet(mat,as.numeric(df_out$intervention) )
model<-glmnet(mat,as.numeric(df_out$intervention),family="binomial",lambda=cv$lambda.min)
coef<-predict(model, type="coefficients") #I didn't use cv$lambda.1se because I only got 1 coefficient diferent from 0.
coef
set.seed(123);
mat<-model.matrix(intervention~.,data=df_out[-1]); mat=mat[,-1] # remove intercept
foldid <- sample(rep(seq(3), length.out = nrow(df_out[-1]))) # to be reproducible
fit<-glmnet::cv.glmnet(x=mat,y=df_out[-1]$intervention,family ="binomial",type.measure='mse',alpha=1) #, foldid = foldid, nfolds = 3, standardize = FALSE)
plot(fit)
c<-coef(fit,s='lambda.min',exact=TRUE); inds<-which(c!=0) #include only variable lambda coeficients bigger than 0
variables<-row.names(c)[inds]; variables<-variables[!variables %in% '(Intercept)']; variables #extrcat thoise variables
full.model = glm(intervention ~., data = df_out[-1], family = binomial(link='logit'))
step.model <- full.model %>% stepAIC(trace = FALSE)
coef(step.model)
print(step.model)
plot(step.model)
plot(step.model)
mat<-model.matrix(intervention~.,data=df_out[-1]); mat=mat[,-1] # remove intercept
set.seed(123);
mat<-model.matrix(intervention~.,data=df_out[-1]); mat=mat[,-1] # remove intercept
foldid <- sample(rep(seq(3), length.out = nrow(df_out[-1]))) # to be reproducible
fit<-glmnet::cv.glmnet(x=mat,y=df_out[-1]$intervention,family ="binomial",type.measure='mse',alpha=1) #, foldid = foldid, nfolds = 3, standardize = FALSE)
plot(fit)
c<-coef(fit,s='lambda.min',exact=TRUE); inds<-which(c!=0) #include only variable lambda coeficients bigger than 0
variables<-row.names(c)[inds]; variables<-variables[!variables %in% '(Intercept)']; variables #extrcat thoise variables
df_diff_plot <- pivot_re(df_diff, variables)
df_diff
variables
coef(step.model)
coef(step.model)
names(coef(step.model))
names(coef(step.model))[-1]
diff_names
df_diff_plot <- gather(df_diff, "var", "measure", all_of(variables))
df_diff_plot <- pivot_re(df_diff, c("1", "10", "14"))
box_plot %+% df_diff_plot
box_plot %+% df_diff_plot + ylab("Difference scores") + title('Variable selected')
df_diff_plot <- pivot_re(df_diff, c("1", "3", "14"))
#box plot
box_plot %+% df_diff_plot + ylab("Difference scores") + title('Variables selected')
predictors(rfeResults)
coef(step.model)
variables
coef(step.model)
full.model = glm(intervention ~., data = df_out[-1], family = binomial(link='logit'))
step.model <- full.model %>% stepAIC(trace = FALSE, direction = "both")
coef(step.model)
full.model = glm(intervention ~., data = df_out[-1], family = binomial(link='logit'))
step.model <- full.model %>% stepAIC(trace = FALSE, direction = "forward")
coef(step.model)
full.model = glm(intervention ~., data = df_out[-1], family = binomial(link='logit'))
step.model <- full.model %>% stepAIC(trace = FALSE, direction = "backward")
coef(step.model)
full.model = glm(intervention ~., data = df_out[-1], family = binomial(link='logit'))
step.model <- full.model %>% stepAIC()
coef(step.model)
full.model = glm(intervention ~., data = df_out[-1], family = binomial)
step.model <- full.model %>% stepAIC(trace = FALSE)
coef(step.model)
predictors(rfeResults)
df_diff_plot <- pivot_re(df_diff, c("1", "3", "14"))
#box plot
box_plot %+% df_diff_plot + ylab("Difference scores") + title('Variables selected')
dens_log_plot_plot %+% df_diff_plot + ylab("Difference scores") + title('Variables selected')
dens_log_plot %+% df_diff_plot + ylab("Difference scores") + title('Variables selected')
library(R.matlab)
mat <- readMat("data/sub-control100/data.mat")
mat$modulators2  #check structure -> this a list
head(mat$modulators2[[1]],2) #Accessing list number 1 (i.e "start")
mat$modulators2[[2]] #Accessing list number 2 (i.e "odor") -> stil a list !
head(mat$modulators2[[2]][[3]],2) #Accessing list number 3 (i.e "control") within embedded list number 1 (i.e "odor")
#of course remove head(,2) here it'sjust for display purpose
dir("data/", pattern="sub-*", all.files=T,
full.names=T)
for (s in subject) {
mat <- readMat(paste(s, "/data.mat"))
}
subject = dir("data", pattern="sub-*", all.files=T,
full.names=T)
for (s in subject) {
mat <- readMat(paste(s, "/data.mat"))
}
for (s in subject) {
mat <- readMat(paste(s, "/data.mat", sep=""))
}
mat$modulators2[[1]]
mat$onsets2[[1]]
mat$onsets2[[2]]
mat$durations2[[2]]
mat$onsets2[[1]]
mat$onsets2[[1]][[1]]
mat$modulators2[[2]]
#start
onsets_start = mat$onsets2[[2]]
durations_start = mat$durations2[[2]]
modulator_start = mat$modulators2[[1]] #watchout it's reversed here !
rbind(onsets_start, durations_start, modulator_start)
cbind(onsets_start, durations_start, modulator_start)
start = cbind(onsets_start, durations_start, modulator_start)
write.table(start, paste(s, "/start.txt", sep=""), row.names = F, sep="\t")
write.table(start, paste(s, "/start.txt", sep=""), row.names = F, sep="\t", col.names = F)
modulator_odor_rew
modulator_odor_rew = mat$modulators2[[2]][[1]] #watchout it's reversed here !
modulator_odor_rew
modulator_odor_rew$condition = "reward"
modulator_odor_rew[2] = "reward"
modulator_odor_rew
modulator_odor_rew[1]
modulator_odor_rew[[1]]
modulator_odor_rew = mat$modulators2[[2]][[1]] #watchout it's reversed here !
modulator_odor_rew[[1]]
modulator_odor_rew[1]
modulator_odor_rew
modulator_odor_rew[,2] = "reward"
as.tibble(mat$modulators2[[2]][[3]])
as_tibble(mat$modulators2[[2]][[3]])
mat <- readMat(paste(s, "/data.mat", sep=""))
#start
onsets_start = mat$onsets2[[2]]
durations_start = mat$durations2[[2]]
modulator_start = mat$modulators2[[1]] #watchout it's reversed here !
start = cbind(onsets_start, durations_start, modulator_start)
write.table(start, paste(s, "/start.txt", sep=""), row.names = F, sep="\t", col.names = F)
#odors
##reward
onsets_odor_rew =  mat$onsets2[[1]][[1]]
durations_odor_rew = mat$durations2[[1]][[1]]
modulator_odor_rew = as_tibble(mat$modulators2[[2]][[1]]) #watchout it's reversed here !
odor_rew = cbind(onsets_odor_rew, durations_odor_rew, modulator_odor_rew)
write.table(odor_rew, paste(s, "/odor_rew.txt", sep=""), row.names = F, sep="\t", col.names = F)
##neutral
onsets_odor_neu =  mat$onsets2[[1]][[2]]
durations_odor_neu = mat$durations2[[1]][[2]]
modulator_odor_neu = as_tibble(mat$modulators2[[2]][[2]]) #watchout it's reversed here !
odor_neu = cbind(onsets_odor_neu, durations_odor_neu, modulator_odor_neu)
write.table(odor_neu, paste(s, "/odor_neu.txt", sep=""), row.names = F, sep="\t", col.names = F)
##control
onsets_odor_con =  mat$onsets2[[1]][[3]]
durations_odor_con = mat$durations2[[1]][[3]]
modulator_odor_con = as_tibble(mat$modulators2[[2]][[3]]) #watchout it's reversed here !
odor_con = cbind(onsets_odor_con, durations_odor_con, modulator_odor_con)
write.table(odor_con, paste(s, "/odor_con.txt", sep=""), row.names = F, sep="\t", col.names = F)
modulator_odor_rew$condition = "reward"
modulator_odor_rew
modulator_odor_rew = cbind(modulator_odor_rew, onsets_odor_con)
modulator_odor_rew
modulator_odor_rew$condition = "reward"; modulator_odor_rew = cbind(modulator_odor_rew, onsets_odor_rew)
modulator_odor_neu$condition = "neutral"; modulator_odor_nue = cbind(modulator_odor_nue, onsets_odor_neu)
modulator_odor_con$condition = "control"; modulator_odor_con = cbind(modulator_odor_con, onsets_odor_con)
df = rbind(modulator_odor_rew, modulator_odor_neu, modulator_odor_con)
mat <- readMat(paste(s, "/data.mat", sep=""))
#start
onsets_start = mat$onsets2[[2]]
durations_start = mat$durations2[[2]]
modulator_start = mat$modulators2[[1]] #watchout it's reversed here !
start = cbind(onsets_start, durations_start, modulator_start)
write.table(start, paste(s, "/start.txt", sep=""), row.names = F, sep="\t", col.names = F)
#odors
##reward
onsets_odor_rew =  mat$onsets2[[1]][[1]]
durations_odor_rew = mat$durations2[[1]][[1]]
modulator_odor_rew = as_tibble(mat$modulators2[[2]][[1]]) #watchout it's reversed here !
odor_rew = cbind(onsets_odor_rew, durations_odor_rew, modulator_odor_rew)
write.table(odor_rew, paste(s, "/odor_rew.txt", sep=""), row.names = F, sep="\t", col.names = F)
##neutral
onsets_odor_neu =  mat$onsets2[[1]][[2]]
durations_odor_neu = mat$durations2[[1]][[2]]
modulator_odor_neu = as_tibble(mat$modulators2[[2]][[2]]) #watchout it's reversed here !
odor_neu = cbind(onsets_odor_neu, durations_odor_neu, modulator_odor_neu)
write.table(odor_neu, paste(s, "/odor_neu.txt", sep=""), row.names = F, sep="\t", col.names = F)
##control
onsets_odor_con =  mat$onsets2[[1]][[3]]
durations_odor_con = mat$durations2[[1]][[3]]
modulator_odor_con = as_tibble(mat$modulators2[[2]][[3]]) #watchout it's reversed here !
odor_con = cbind(onsets_odor_con, durations_odor_con, modulator_odor_con)
write.table(odor_con, paste(s, "/odor_con.txt", sep=""), row.names = F, sep="\t", col.names = F)
#behavioral
modulator_odor_rew$condition = "reward"; modulator_odor_rew = cbind(modulator_odor_rew, onsets_odor_rew)
modulator_odor_neu$condition = "neutral"; modulator_odor_nue = cbind(modulator_odor_neu, onsets_odor_neu)
modulator_odor_con$condition = "control"; modulator_odor_con = cbind(modulator_odor_con, onsets_odor_con)
df = rbind(modulator_odor_rew, modulator_odor_neu, modulator_odor_con)
View(df)
rbind(modulator_odor_rew, modulator_odor_neu, modulator_odor_con)
modulator_odor_rew
modulator_odor_neu
modulator_odor_rew$condition = "reward"; modulator_odor_rew = cbind(modulator_odor_rew, onsets_odor_rew)
modulator_odor_neu$condition = "neutral"; modulator_odor_neu = cbind(modulator_odor_neu, onsets_odor_neu)
modulator_odor_con$condition = "control"; modulator_odor_con = cbind(modulator_odor_con, onsets_odor_con)
df = rbind(modulator_odor_rew, modulator_odor_neu, modulator_odor_con)
modulator_odor_rew
mat <- readMat(paste(s, "/data.mat", sep=""))
#start
onsets_start = mat$onsets2[[2]]
durations_start = mat$durations2[[2]]
modulator_start = mat$modulators2[[1]] #watchout it's reversed here !
start = cbind(onsets_start, durations_start, modulator_start)
write.table(start, paste(s, "/start.txt", sep=""), row.names = F, sep="\t", col.names = F)
#odors
##reward
onsets_odor_rew =  mat$onsets2[[1]][[1]]
durations_odor_rew = mat$durations2[[1]][[1]]
modulator_odor_rew = as_tibble(mat$modulators2[[2]][[1]]) #watchout it's reversed here !
odor_rew = cbind(onsets_odor_rew, durations_odor_rew, modulator_odor_rew)
write.table(odor_rew, paste(s, "/odor_rew.txt", sep=""), row.names = F, sep="\t", col.names = F)
##neutral
onsets_odor_neu =  mat$onsets2[[1]][[2]]
durations_odor_neu = mat$durations2[[1]][[2]]
modulator_odor_neu = as_tibble(mat$modulators2[[2]][[2]]) #watchout it's reversed here !
odor_neu = cbind(onsets_odor_neu, durations_odor_neu, modulator_odor_neu)
write.table(odor_neu, paste(s, "/odor_neu.txt", sep=""), row.names = F, sep="\t", col.names = F)
##control
onsets_odor_con =  mat$onsets2[[1]][[3]]
durations_odor_con = mat$durations2[[1]][[3]]
modulator_odor_con = as_tibble(mat$modulators2[[2]][[3]]) #watchout it's reversed here !
odor_con = cbind(onsets_odor_con, durations_odor_con, modulator_odor_con)
write.table(odor_con, paste(s, "/odor_con.txt", sep=""), row.names = F, sep="\t", col.names = F)
#behavioral
modulator_odor_rew$condition = "reward"; modulator_odor_rew = cbind(modulator_odor_rew, onsets_odor_rew)
modulator_odor_neu$condition = "neutral"; modulator_odor_neu = cbind(modulator_odor_neu, onsets_odor_neu)
modulator_odor_con$condition = "control"; modulator_odor_con = cbind(modulator_odor_con, onsets_odor_con)
df = rbind(modulator_odor_rew, modulator_odor_neu, modulator_odor_con)
df
rbind.fill (modulator_odor_rew, modulator_odor_neu, modulator_odor_con)
modulator_odor_rew = cbind(cbind(date=c(modulator_odor_rew, onsets_odor_rew))
)
modulator_odor_rew
mat <- readMat(paste(s, "/data.mat", sep=""))
#start
onset = mat$onsets2[[2]]
duration = mat$durations2[[2]]
modulator = mat$modulators2[[1]] #watchout it's reversed here !
start = cbind(onset, duration, modulator)
write.table(start, paste(s, "/start.txt", sep=""), row.names = F, sep="\t", col.names = F)
#odors
##reward
onset =  mat$onsets2[[1]][[1]]
duration = mat$durations2[[1]][[1]]
modulator = as_tibble(mat$modulators2[[2]][[1]]) #watchout it's reversed here !
odor_rew = cbind(onset, duration, modulator)
write.table(odor_rew, paste(s, "/odor_rew.txt", sep=""), row.names = F, sep="\t", col.names = F)
modulator$condition = "reward"; mod_rew = cbind(modulator, onset);
##neutral
onset =  mat$onsets2[[1]][[2]]
duration = mat$durations2[[1]][[2]]
modulator = as_tibble(mat$modulators2[[2]][[2]]) #watchout it's reversed here !
odor_neu = cbind(onset, duration, modulator)
write.table(odor_neu, paste(s, "/odor_neu.txt", sep=""), row.names = F, sep="\t", col.names = F)
modulator$condition = "neutral"; mod_neu = cbind(modulator, onset);
##control
onsets_odor_con =  mat$onsets2[[1]][[3]]
durations_odor_con = mat$durations2[[1]][[3]]
modulator_odor_con = as_tibble(mat$modulators2[[2]][[3]]) #watchout it's reversed here !
odor_con = cbind(onset, duration, modulator)
write.table(odor_con, paste(s, "/odor_con.txt", sep=""), row.names = F, sep="\t", col.names = F)
modulator$condition = "control"; mod_con = cbind(modulator, onset);
#behavioral
df = rbind (mod_rew, mod_neu, mod_con)
}
df
df = df[order(onset),]
df
df = rbind (mod_rew, mod_neu, mod_con);
df
df[order(onset),]
df[order(df$onset),]
df$trial = 1:54
df
s
str_sub(s,-6,-1)
str_sub(s,-3,-1)
str_sub(s,-9,-3)
str_sub(s,-10,-4)
s = "data/sub-control201"
str_sub(s,-10,-4)
r = []
r = ()
r = data_frame()
r = tibble()
rbind(r,df)
library(R.matlab)
subject = dir("data", pattern="sub-*", all.files=T,
full.names=T)
data = tibble()
for (s in subject) {
mat <- readMat(paste(s, "/data.mat", sep=""))
#start
onset = mat$onsets2[[2]]
duration = mat$durations2[[2]]
modulator = mat$modulators2[[1]] #watchout it's reversed here !
start = cbind(onset, duration, modulator)
write.table(start, paste(s, "/start.txt", sep=""), row.names = F, sep="\t", col.names = F)
#odors
##reward
onset =  mat$onsets2[[1]][[1]]
duration = mat$durations2[[1]][[1]]
modulator = as_tibble(mat$modulators2[[2]][[1]]) #watchout it's reversed here !
odor_rew = cbind(onset, duration, modulator)
write.table(odor_rew, paste(s, "/odor_rew.txt", sep=""), row.names = F, sep="\t", col.names = F)
modulator$condition = "reward"; mod_rew = cbind(modulator, onset);
##neutral
onset =  mat$onsets2[[1]][[2]]
duration = mat$durations2[[1]][[2]]
modulator = as_tibble(mat$modulators2[[2]][[2]]) #watchout it's reversed here !
odor_neu = cbind(onset, duration, modulator)
write.table(odor_neu, paste(s, "/odor_neu.txt", sep=""), row.names = F, sep="\t", col.names = F)
modulator$condition = "neutral"; mod_neu = cbind(modulator, onset);
##control
onsets_odor_con =  mat$onsets2[[1]][[3]]
durations_odor_con = mat$durations2[[1]][[3]]
modulator_odor_con = as_tibble(mat$modulators2[[2]][[3]]) #watchout it's reversed here !
odor_con = cbind(onset, duration, modulator)
write.table(odor_con, paste(s, "/odor_con.txt", sep=""), row.names = F, sep="\t", col.names = F)
modulator$condition = "control"; mod_con = cbind(modulator, onset);
#behavioral
df = rbind (mod_rew, mod_neu, mod_con);
df = df[order(df$onset),] #order by onset
df$trial = 1:54 #trial nuumber
df$id = str_sub(s,-3,-1) #extract last 3 charcaters of the string
df$group = str_sub(s,-10,-4)
data = rbind(data,df)
}
View(data)
